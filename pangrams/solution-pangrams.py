#!/usr/bin/python3
# Copyright (C) 2025 Dez Moleski dez@moleski.com
# MIT License: All uses allowed with attribution.
#
from wordgames import Word, WordList, AnagramsDict, LetterSetBitmask, ALPHABET_LIST
import sys
from copy import deepcopy
from glob import glob
from operator import itemgetter
from itertools import islice
import datetime
import json
import os.path
import re

def expand_pangrams(expanded: list, singles: list, every_expansion_has_answers: bool, anagram_sets: list, answers: WordList):
   # We recurse until we reach depth == 6 at which point we can just append the
   # fully expanded anagram represented by the singles into the expanded list.
   # This could be written to stop the recursion when anagram_sets is empty, too.
   depth = len(singles)
   if depth == 6:
      singles.sort()
      expanded.append(singles)
   else:
      try:
         next_anagram_sets = anagram_sets.copy() # need our own copy at each depth
         anagrams_list = next_anagram_sets.pop()
         for item in anagrams_list:
            w = Word(item)
            if answers.contains_word(w):
               w.star(True) # Marks Word to format its repr with trailing '*'
            # Only recurse if either every expansion has answers, or if this
            # anagram is itself an answer.
            if every_expansion_has_answers or w.starred:
               next_singles = singles.copy()
               next_singles.append(w)
               expand_pangrams(expanded, next_singles, every_expansion_has_answers, next_anagram_sets, answers)
      except:
         print('ERROR: singles, depth:', singles, depth, file=sys.stderr)
         print('ERROR: anagram_sets:', anagram_sets, file=sys.stderr)

if __name__ == "__main__":
   if len(sys.argv) != 1:
      exit("Usage: solution-pangrams")
   
   # Read ALL GUESSES file
   ALL_FILE = "./ALL"
   print("Reading all valid guesses file:", ALL_FILE, file=sys.stderr, flush=True, end=' ')
   valid_guesses = WordList.from_file(ALL_FILE)
   valid_guesses.sort()
   print("N =", len(valid_guesses), file=sys.stderr, flush=True)
   
   # Read ANSWERS
   ANSWERS_FILE = "./ANSWERS"
   print("Reading answers file:", ANSWERS_FILE, file=sys.stderr, flush=True, end=' ')
   answers = WordList.from_file(ANSWERS_FILE)
   answers.sort()
   print("N =", len(answers), file=sys.stderr, flush=True)

   # Visit each pangram data file
   print("Scanning data files: ", file=sys.stderr, flush=True, end='')
   all_pgrams = list()
   total_pangrams = 0
   total_pangrams_containing_answers = 0
   word_count = dict()
   
   for letter in ALPHABET_LIST:
      print(letter, file=sys.stderr, flush=True, end=' ')
      datadir = f"./data/{letter}/"
      if os.path.isdir(datadir):
         # Visit each file in the data dir
         paths = sorted(glob(datadir+'*'))
         for filepath in paths:
            with open(filepath, 'r') as f:
               # Read each line and split first into line_list array.
               # Anagrams within the line are like: '[VIGOR|VIRGO]'
               for line in f:
                  line_list = line.split()
                  if line_list[0] != '#': # Just skip the summary lines, we don't need them
                     all_pgrams.append(line_list) # unexpanded anagrams here
                     
                     # Visit each word or anagram set in the line, and
                     # accumulate the words into our all_words WordList.
                     # Also count how many pangrams are generated by expanding any anagrams.
                     # The trickiest part is counting for each word how many pangrams that
                     # word appears in. This is easy for the single word items, but for
                     # words that are part of an anagram set it's not as straightforward
                     # unless there's only one anagram set in the pangram.
                     single_words_in_this_pangram = list()
                     anagram_sets_in_this_pangram = list()
                     for item in line_list:
                        # If it's five letters, this item is a single word
                        if len(item) == 5:
                           single_words_in_this_pangram.append(item)
                        else:
                           # It's anagrams like '[VIGOR|VIRGO]', so trim and split it into words.
                           stripped = item.strip('[]')
                           words = stripped.split('|')
                           anagram_sets_in_this_pangram.append(words)

                     # Check whether any of the pangrams this line expands to contain
                     # a solution (amounts to whether any of the words or an anagram
                     # of a word are an answer). These are the only ones we're interested in.
                     this_pangram_contains_answers = False
                     for item in single_words_in_this_pangram:
                        if answers.contains(item):
                           this_pangram_contains_answers = True
                           break
                     if not this_pangram_contains_answers:
                        for s in anagram_sets_in_this_pangram:
                           for w in s:
                              if not this_pangram_contains_answers and answers.contains(w):
                                 this_pangram_contains_answers = True
                     
                     if this_pangram_contains_answers:
                        single_words = list() # a list of the single word strings as Words
                        singles_contain_answers = False
                        for item in single_words_in_this_pangram:
                           w = Word(item)
                           if answers.contains_word(w):
                              w.star(True) # Marks Word to format its repr with trailing '*'
                              singles_contain_answers = True
                           single_words.append(w)
                        # This recursive function builds expanded_pangrams into a list of lists of Words.
                        # If the original single words contain any answers, then EVERY expanded
                        # pangram will also contain answers, otherwise only expansions where an
                        # anagram is an answer contains an answer!
                        expanded_pangrams = list()
                        expand_pangrams(expanded_pangrams, single_words, singles_contain_answers, anagram_sets_in_this_pangram, answers)
                        total_pangrams += len(expanded_pangrams)
                        for e in expanded_pangrams:
                           for w in e:
                              print(w, end=' ')
                           print()
                        
